// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SerieMovieAPI.Data;

namespace SerieMovieAPI.Migrations
{
    [DbContext(typeof(SerieMovieDBContext))]
    [Migration("20211124194238_base de datos modificado")]
    partial class basededatosmodificado
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CharacterModelMovieserieModel", b =>
                {
                    b.Property<int>("CharactersCharacterId")
                        .HasColumnType("int");

                    b.Property<int>("MovieseriesMovieserieId")
                        .HasColumnType("int");

                    b.HasKey("CharactersCharacterId", "MovieseriesMovieserieId");

                    b.HasIndex("MovieseriesMovieserieId");

                    b.ToTable("CharacterModelMovieserieModel");
                });

            modelBuilder.Entity("SerieMovieAPI.Models.CharacterModel", b =>
                {
                    b.Property<int>("CharacterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Age_Character")
                        .HasColumnType("int");

                    b.Property<string>("History_Character")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Image_Character")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name_Character")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Weight_Character")
                        .HasColumnType("float");

                    b.HasKey("CharacterId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("SerieMovieAPI.Models.GenreModel", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("Image_Genre")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("MovieserieId")
                        .HasColumnType("int");

                    b.Property<string>("Name_Genre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenreId");

                    b.HasIndex("MovieserieId");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("SerieMovieAPI.Models.MovieserieModel", b =>
                {
                    b.Property<int>("MovieserieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date_Movserie")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Image_Movserie")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("Rating_Movserie")
                        .HasColumnType("int");

                    b.Property<string>("Title_Movserie")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MovieserieId");

                    b.ToTable("Movieseries");
                });

            modelBuilder.Entity("SerieMovieAPI.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CharacterModelMovieserieModel", b =>
                {
                    b.HasOne("SerieMovieAPI.Models.CharacterModel", null)
                        .WithMany()
                        .HasForeignKey("CharactersCharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SerieMovieAPI.Models.MovieserieModel", null)
                        .WithMany()
                        .HasForeignKey("MovieseriesMovieserieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SerieMovieAPI.Models.GenreModel", b =>
                {
                    b.HasOne("SerieMovieAPI.Models.MovieserieModel", "Movieserie")
                        .WithMany()
                        .HasForeignKey("MovieserieId");

                    b.Navigation("Movieserie");
                });
#pragma warning restore 612, 618
        }
    }
}
